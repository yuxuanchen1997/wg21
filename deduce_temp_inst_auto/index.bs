<pre class='metadata'>
Title: Placeholder Type Specifiers in Template Argument Lists
H1: Placeholder Type Specifiers in Template Argument Lists
Shortname: PAPER_NUMBER
Revision: 0
Status: D
Group: WG21
Audience: EWGI, EWG
Editor: Yuxuan Chen, yuxuanchen1997@outlook.com
URL: https://wg21.link/tbd
Markup Shorthands: markdown yes
Toggle Diffs: no
No Abstract: yes
Default Biblio Display: inline
Default Highlight: c++
</pre>

# Revision History # {#rev_hist}
R0 November 2023: Initial version.

# Introduction # {#intro}
Placeholder type specifier (i.e. keyword `auto` and `decltype(auto)`) is considered one of the
many important features of C++11. 
Using `auto` in the right context make programs more consice. 
This paper proposes using `auto` as placeholder type specifier in template argument lists in various contexts for better expressiveness. 

This paper also discusses the known limitations of such approach and how a potentially different logic of partial substitution may help with deduction. 

## Background ## {#background}
This section describes a few existing places we use `auto` to elide usages of concrete type names or introducing parameters for function templates.

### Placeholder type specifiers in C++11
Since C++11, we can already use `auto` as a placeholder type that will be deduced.
```
auto x1 = 1; // decltype(x1) is int
```
We also use `auto` for types that cannot be otherwise specified.
```
auto fn = [] {}; // decltype(fn) is lambda
```
According to [dcl.type.auto.deduct] (3) The type of the variable is determined using the rules for template argument deduction.

### Abbreviated function templates in C++20

C++20 further made it possible to declare abbreviated function templates [dcl.fct] (22). 
One can introduce new invented template parameters with `auto` as part of parameter types (appended to the parameter list if there are template heads). 
The following `compose` function is such an example.

```
auto compose(auto f, auto g) {
    return [=](auto v) {
        return g(f(v));
    };
}
```
Function template `compose` in this example is equivalent to 
```
template <typename F, typename G>
auto compose(F f, G g) {
    return [=](auto v) {
        return g(f(v));
    };
}
```
It's therefore legal to write:
```
int plus_one(int i) {
    return i + 1;
}

int square(int i) {
    return i * i;
}

void foo() {
    compose(plus_one, square)(3); // evaluates to 16
}
```

Such abbreviation only allowed `auto` to appear as complete type specifiers. 
One cannot write such template that takes `std::optional<auto>` and expect the `auto` to work similarly,
because template argument lists do not take placeholder type specifiers. 

GCC has an extension to accept this abbreviated function template with `auto` being a parameter under `-fconcepts-ts`. 
However, as of the time of writing, clang and MSVC still rejects programs like this.

## Reasons behind using `auto` in variable declarations
Whether a type specifier is more preferrable to be deduced than specified explicitly is often situational. 
At the time of the variable declaration, 
the developer often has the best opportunities (and responsibility) for judgement 
and decide on how they want the type specifier to look like. 

1. There's value to make variable types deduced:
    + It reduces verbosity and promotes readability when explicitly specified type does not add more value for reading.
    + In the case of lambda, the type is unspecified. One can make an argument that it's possible to use  
        `decltype()` on an auto deduced lambda type, but the ergonomics of `decltype()` itself can sometimes be a problem.

2. There's also undeniable value to make template argument explicit rather than deduced, even if it doesn't change the semantic meaning of the program.
    + One will end up with more expressive programs. Many programers prefer their code to be self documenting. Code is read more often than written. Having explicit type arguments sometimes helps convey the author's intention.
    + Humans make mistakes when writing programs and many errors are caught with typechecking. In the case of explicitly specifying the type, one may avoid the case where the compiler would deduce an unexpected type. In the event of developer not making the right assumption, they would get compiler diagnostics instead of surprising behaviours. 

## Motivation ## {#motivation}

Using `auto` in variable declarations is great. However, the standard only permits use of such placeholder type specifiers in contexts explicitly allowed in [dcl.spec.auto]. 
This made usages of `auto` in template argument lists ill-formed.

Briefly speaking, this proposal would like to make the following variable declaration valid:

```
std::optional<auto> i = std::make_optional(5);
std::pair<auto, int> p{[] {}, 42};
```
Meanwhile, Concepts TS already introduced such capabilities [citation needed] and this proposal intends to unify the syntax.

### What problem does this proposal solve?

Library authors tend to like the parameters of many templates deduced. 
CTAD from C++17 and deduction guides further made more template arguments deducible. 

As discussed previously, there are justifications to make a template argument either deduced or specified. 
The intention of this paper is to make the experience coherent and give the expressive power to the developer to make the judgement. 

## Scope ## {#scope}
This proposal aims to make the core language more ergonomic while giving the user more control.
It does not make arguments more deducible when it would fail otherwise. 

# Proposed Semantics # {#semantics}
## Placeholder type in variable declaration
Using the example above,
```
std::optional<auto> i = std::make_optional(5);
std::pair<auto, int> p{[] {}, 42};
```
the type of `i` is the deduced type of the parameter `u` in the call `f1(std::make_optional(5))` of the following invented function template:
```
template <class U> void f1(std::optional<U> u);
``` 
One would imagine that the type of `p` is the deduced similarly, such that it should be the type of the parameter `u` in the call `f2(std::pair{[] {}, 42})` of the following invented function template:
```
template <class U> void f2(std::pair<U, int> u);
```
Note: applies regardless of storage class.

## Template type argument in abbreviated function templates

GCC already supports this with `-fconcepts-ts` flag. 
This proposal would like to make the following abbreviated function template 
```
void foo(std::pair<auto, int> p) {}
```
to be equivalent to 
```
template <typename _T>
void foo(std::pair<_T, int> p) {}
```

## Instantiating function templates
TODO

## Extension to trailing return types
TODO
```
auto foo(auto f, auto g) -> std::pair<auto, int> {}
```

# Limitations
TODO: Standard Draft Citation needed

This approach to reuse the same deduction logic from template argument deduction, 
however, makes it impossible to write some variable declaration with partially deduced types. 

Consider the following example:
```
template <class U> void f3(std::pair<U, unsigned> u);

void foo() {
    f3(std::pair{[] {}, 42});
}
```
This program is ill-formed, because `std::pair{[] {}, 42}` is deduced to `std::pair<(lambda), int>`. 
Deduction for `U` in function template `f3` here will fail. 

Following the same logic, simply copying the logic of `f3`'s function template argument deduction for a declaration will make declarations like `std::pair<auto, unsigned> p{[] {}, 42}` ill-formed. 

## Options 
### Ill-formed Implicit conversions
TODO: to fix this, one might expect deduction to work after partial substitution of templates?

### Deduce after partial substitution
TODO:

# Proposed Wording # {#wording}
TODO: find the relevant wording.

[dcl.spec.auto.general]

[dcl.type.auto.deduct]
determined using the rules for template argument deduction

9.2.9.6.1 (5)

A placeholder type can also be used in the template

# References # {#ref}
TODO: references

- [n4964] Working Draft, Programming Languages -- C++ 