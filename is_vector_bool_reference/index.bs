<pre class='metadata'>
Title: `std::is_vector_bool_reference<T>`
H1: `std::is_vector_bool_reference<T>`
Shortname: P3719
Revision: 1
Status: P 
Group: WG21
Audience: LEWG, LEWGI
Editor: Yuxuan Chen, i@yuxuan.ch
URL: https://wg21.link/p3719r1
Markup Shorthands: markdown yes
Toggle Diffs: no
No Abstract: yes
Default Biblio Display: inline
Default Highlight: c++
</pre>

# Revision History # {#rev_hist}

R0: Initial version

R1: Added concept, and wording. 

# Introduction # {#intro}
This paper proposes to add a new type trait `std::is_vector_bool_reference<T>` that exposes the previously exposition-only constant `is-vector-bool-reference` in [vector.bool.pspc]/8 to `<type_traits>`. The trait `std::is_vector_bool_reference<T>::value` evaluates to true if and only if `T` denotes the type `vector<bool, Alloc>::reference` for some type `Alloc` and `vector<bool, Alloc>` is not a program-defined specialization.

## Motivation ## {#motivation}
This new trait is intended to help code like this

```cpp
// Illustration only, library may contain many overloads for `read`
void read(bool& b);
void read(int& b);
void read(long& b);
void read(long long& b);
// ... many more
```

One who writes this code (who may be working with a serialization library like Apache Thrift) will soon realize that this needs to work with `std::vector<bool>`, in which the `bool`s aren't actual bool objects. Some may find tempting to add an overload that looks like this:

```cpp
void read(std::_Bit_reference b);
``` 

However, this code isn't portable due to its dependency on libstdc++'s implementation details. This unfortunately occurs a lot in a massive code base that previously used libstdc++.

Another attempt to write this in standard C++ would look something like:

```cpp
void read(std::vector<bool>::reference b);
```

This works fine for most cases and seemingly solved the problem with standard C++, until your function `read` runs into a reference to a `std::vector<bool, MyAllocator>` with a custom allocator.

This approach sometimes doesn't work. That is because `std::vector<bool, MyAllocator>::reference` and `std::vector<bool>::reference` may or may not be the same type. In fact, they are the same type in libstdc++, which is just `std::_Bit_reference` defined [here](https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_bvector.h#L764). While in libc++ and MSVC STL, this is defined as a template whose argument may contain the vector type.

When someone runs into such an error, an intuitive but naive thought would be to make the allocator type in the vector parameterized.

```cpp
template <typename Alloc>
void read(std::vector<bool, Alloc>::reference b);
```
However, compilers can't deduce `Alloc` here because it has no way to figure out which `vector` a `__bit_reference<vector<bool, Alloc>>` has come from. It's impractical for any user of this function to provide the allocator type either. This solution is still not ideal.


## Existing Practices ## {#existing}

This is not the first time anyone has run into this problem. In fact, the [vector.bool.pspc]/8 states that there's an exposition-only constant `is-vector-bool-reference` that is true if T denotes the type `vector<bool, Alloc>::reference` for some type `Alloc` and `vector<bool, Alloc>` is not a program-defined specialization. The only use of the constant is formatter in [vector.bool.fmt]. 

libc++ implements the exposition-only constant through a check [here](https://github.com/llvm/llvm-project/blob/2523a8358ab9526a46f825fd94cc8a5d018f5ff7/libcxx/include/__vector/vector_bool_formatter.h#L28).

## Proposed Solution: A Type Trait

This paper is to propose that we just provide this as a type trait in standard C++ along the lines of:

```
template <typename T>
constexpr bool is_vector_bool_reference_v = /* ... */

template <class T> struct is_vector_bool_reference;
```

This [link](https://godbolt.org/z/e5dYjdnKM) to compiler explorer provides some implementation experience for libstdc++, libc++, and MSVC STL. The implementation is straightforward.

Since `libc++` also shares the bit reference definition with `std::bitset<N>::reference`, inclusion of forward declaration of vector here is required, but otherwise it's the same.

Please note that `libc++`'s' [definition](https://github.com/llvm/llvm-project/blob/2523a8358ab9526a46f825fd94cc8a5d018f5ff7/libcxx/include/__vector/vector_bool_formatter.h#L28) for `is-vector-bool-reference` also covers its standard noncompliant `__bit_const_reference` with `_LIBCPP_ABI_VERSION == 1`. Since this is already non-standard, whether it should return true for `__bit_const_reference` is left to libc++ maintainers to decide. It's not an issue for the motivating example, due to the expectation of a const ref would allow the `__bit_const_reference` to be converted to a bool.

With such a type trait, we can declare the overload in the form of 

```
template <typename BitReference>
    requires std::is_vector_bool_reference_v<BitReference>
void read(BitReference b);
```
And this works as expected.

## Accompanying Standard Library Concept ## {#concept}

With C++20 style concepts, we can define a standard library concept like the follows:

```cpp
namespace std {

template <typename T>
concept vector_bool_reference = is_vector_bool_reference_v<T>;

}
```
With the concept, we can declare the overload in the form of an implicit function template:

```
void read(std::vector_bool_reference auto b) {
  b = true;
}
```

# Or Should We Change Template Argument Deduction Instead?

An alternative would be introducing some core language change to make deducing the `Alloc` parameter for the function template
```
template <typename Alloc>
void read(std::vector<bool, Alloc>::reference b);
```
possible. However, this requires looking at all partial specializations of the class template, finding the dependent member, removing the specialization where this name doesn't exist or is not a type, then deduce the template parameter `Alloc` for the class based on the knowledge you have with the incoming type. Even then, deducing `Alloc` may still fail because some implementations of the `_Bit_reference` don't depend on `Alloc`. This approach does not immediately seem feasible. The library solution proposed in this paper should be the better solution.

# Impact on the standard

This paper proposes a library only change that shouldn't impact the core language. Since the standard already depends on the exposition-only constant `is-vector-bool-reference` we can make the formatter use this type trait to constrain the template specialization instead. 

# Proposed Wording Changes # {#wording}

Edit [**meta.type.synop**] as follows:

<blockquote>
<pre><code>
  // [meta.unary.prop], type properties
  ...
  template&lt;class T, class U&gt; struct reference_constructs_from_temporary;
  template&lt;class T, class U&gt; struct reference_converts_from_temporary;
  <ins>template&lt;class T&gt; struct is_vector_bool_reference;</ins>

  // [meta.unary.prop.query], type property queries
  template&lt;class T&gt; struct alignment_of;
  template&lt;class T&gt; struct rank;
  template&lt;class T, unsigned I = 0&gt; struct extent;

</code></pre>
</blockquote>

<blockquote>
<pre><code>
  // [meta.unary.prop], type properties
  ...
  template&lt;class T, class U&gt;
    constexpr bool reference_constructs_from_temporary_v
      = reference_constructs_from_temporary&lt;T, U&gt;::value;
  template&lt;class T, class U&gt;
    constexpr bool reference_converts_from_temporary_v
      = reference_converts_from_temporary&lt;T, U&gt;::value;
  <ins>template&lt;class T&gt;
    constexpr bool is_vector_bool_reference_v
      = is_vector_bool_reference&lt;T&gt;::value;</ins>

  // [meta.unary.prop.query], type property queries
  template&lt;class T&gt;
    constexpr size_t alignment_of_v = alignment_of&lt;T&gt;::value;
  template&lt;class T&gt;
    constexpr size_t rank_v = rank&lt;T&gt;::value;
  template&lt;class T, unsigned I = 0&gt;
    constexpr size_t extent_v = extent&lt;T, I&gt;::value;
</code></pre>
</blockquote>

Append an entry to the table in [**meta.unary.prop**]

<table>
    <ins><tr><td>template &lt;class T&gt;<br>struct is_vector_bool_reference;</td><td>Evaluates to true if T denotes the type vector&lt;bool, Alloc&gt;::reference <br>for some type Alloc and vector&lt;bool, Alloc&gt; is not a program-defined specialization.</td></tr></ins>
</table>

Edit [**vector.bool.pspc**] as follows

<blockquote>
<pre><code>
template&lt;class T&gt;
  constexpr bool <del>is-vector-bool-reference</del><ins>is_vector_bool_reference_v</ins> = see below;
</code></pre>
      The expression <code><del>is-vector-bool-reference</del><ins>is_vector_bool_reference_v&lt;T&gt;</ins></code> is true if T denotes the type vector&lt;bool, Alloc&gt;::reference for some type Alloc and vector&lt;bool, Alloc&gt; is not a program-defined specialization.
</blockquote>

Edit [**vector.bool.fmt**] as follows
<blockquote>
<pre><code>
template&lt;class T, class charT&gt;
    requires <del>is-vector-bool-reference</del><ins>std::is_vector_bool_reference_v</ins>&lt;T&gt;
  struct formatter&lt;T, charT&gt; {
    ...
  };
</code></pre>
</blockquote>

<pre class=biblio>
{
  "folly": {
    "href": "https://github.com/facebook/folly/blob/7dae17e10f36783974c5557b0f2311db8bff64a7/folly/lang/VectorTraits.h#L22",
    "title": "VectorTraits.h",
    "authors": ["folly authors"]
  }
}
</pre>
