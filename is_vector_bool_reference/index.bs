<pre class='metadata'>
Title: `std::is_vector_bool_reference<T>`
H1: `std::is_vector_bool_reference<T>`
Shortname: D9999
Revision: 0
Status: D
Group: WG21
Audience: LEWG
Editor: Yuxuan Chen, i@yuxuan.ch
URL: https://wg21.link/tbd
Markup Shorthands: markdown yes
Toggle Diffs: no
No Abstract: yes
Default Biblio Display: inline
Default Highlight: c++
</pre>

# Revision History # {#rev_hist}

R0: Initial version

# Introduction # {#intro}

This paper proposes a new type trait `std::is_vector_bool_reference<T>`. This is intended to help code like this

```cpp
// Illustration only, library may contain many overloads for `read`
void read(bool& b);
void read(int& b);
void read(long& b);
void read(long long& b);
// ... many more
```

One who writes this code (who may be working with a serialization library like Apache Thrift) will soon realize that this needs to work with `std::vector<bool>`, in which the `bool`s aren't actual bool objects. Some may find tempting to add an overload that looks like this:

```cpp
void read(std::_Bit_reference b);
``` 

However, anyone who has a good understanding of how standard C++ is different from GNU C++ will know that this code is not portable. Instead, it's dependent on libstdc++'s implementation details. 

Another attempt to write this would look something like:

```cpp
void read(std::vector<bool>::reference b);
```

This works fine for most cases and seemingly solved the problem with standard C++. However, if you ever have a `std::vector<bool, MyAllocator>` you will soon figure out that this doesn't work either, at least sometimes. That is because `std::vector<bool, MyAllocator>::reference` and `std::vector<bool>::reference` may be different types. In fact, they are the same type in libstdc++, which is just `std::_Bit_reference` defined [here](https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_bvector.h#L764). While in libc++ and MSVC STL, this is defined as a template with the vector type as a parameter. 

A naive thought would be to make the allocator type in the vector parameterized, 

```
template <typename Alloc>
void read(std::vector<bool, Alloc>::reference b);
```

However, compilers can't deduce `Alloc` because it has no way to figure out which `vector` a `__bit_reference<vector<bool, Alloc>>` has come from. This solution is still not ideal.

This is not the first time anyone has run into this problem. In fact, the [vector.bool.pspc]/8 states that there's an exposition-only constant `is-vector-bool-reference` that is true if T denotes the type `vector<bool, Alloc>​::​reference` for some type `Alloc` and `vector<bool, Alloc>` is not a program-defined specialization. The only use of the constant is formatter in [vector.bool.fmt]. 


# A new type trait

This paper is to propose that we just provide this as a type trait in standard C++.

```
template <typename T>
constexpr bool is_vector_bool_reference_v = /* ... */

template <class T> struct is_vector_bool_reference;
```

This [link](https://godbolt.org/z/e5dYjdnKM) to compiler explorer provides some implementation experience for libstdc++, libc++, and MSVC STL. The implementation should be straightforward.

Please note that `libc++` [implements](https://github.com/llvm/llvm-project/blob/2523a8358ab9526a46f825fd94cc8a5d018f5ff7/libcxx/include/__vector/vector_bool_formatter.h#L28) a definition for <code><em>is-vector-bool-reference</em></code> that also covers its standard noncompliant `__bit_const_reference` in ABIv1. Since this is already non-standard, whether it should return true for `__bit_const_reference` is left to the implementors to decide. Since `libc++` also shares the bit reference definition with `std::bitset<N>::reference` , inclusion of forward declaration of vector here is required, but otherwise it's the same.

With such a type trait, we can define the overload in the form of 

```
template <typename BitReference>
    requires std::is_vector_bool_reference_v<BitReference>
void read(BitReference b);
```

# Are there alternatives?

An alternative would be introducing some core language change to make deducing the `Alloc` parameter for the function template `template <typename Alloc> void read(std::vector<bool, Alloc>::reference b);` possible. However, this requires looking at all partial specializations of the class template, finding the dependent member, removing the specialization where this name doesn't exist or is not a type, then deduce the template parameter `Alloc` for the class based on the knowledge you have with the incoming type. Even then, deducing `Alloc` may still fail because some implementations of the `_Bit_reference` don't depend on `Alloc`. This approach does not immediately seem feasible. The library solution proposed in this paper should be the better solution.


# Impact on the standard

This paper proposes a library only change that shouldn't impact the core language. Since the standard already depends on the exposition-only constant `is-vector-bool-reference` we can make the formatter use this type trait to constrain the template specialization instead. 


# Proposed Wording Changes # {#wording}

TODO: Make changes to 

[meta.type.synop]

[meta.unary.prop]

[vector.bool.pspc]/8

[vector.bool.fmt]
